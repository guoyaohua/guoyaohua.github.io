<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郭耀华&#39;s Blog</title>
  
  <subtitle>欲穷千里目，更上一层楼。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.guoyaohua.cn/"/>
  <updated>2019-05-06T06:09:58.467Z</updated>
  <id>https://www.guoyaohua.cn/</id>
  
  <author>
    <name>郭耀华</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sss</title>
    <link href="https://www.guoyaohua.cn/2019/05/06/sss-2/"/>
    <id>https://www.guoyaohua.cn/2019/05/06/sss-2/</id>
    <published>2019-05-06T12:34:34.000Z</published>
    <updated>2019-05-06T06:09:58.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>配置环境，研究了一整天，踩了很多坑，在网上找了很多资料，发现基本上都没非常明确的教程，所以今天想分享一下配置tensorflow GPU版本的经验，希望能让各位朋友少走些弯路。（PS：一切的前提，你需要有一张Nvidia显卡。我的显卡是 GT940MX）</p><p>Tensorflow有两个版本：GPU和CPU版本，CPU的很好安装；GPU 版本需要 CUDA 和 cuDNN 的支持，如果你是独显+集显，那么推荐你用GPU版本的，因为GPU对矩阵运算有很好的支持，会加速程序执行！并且CUDA是Nvidia下属的程序，所以你的GPU最好是Nvidia的，AMD的显卡没有CUDA加速！满足以上条件之后，你需要查看一下你的英伟达GPU是否支持CUDA，以下是Geforce支持的目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Mon Feb 26 16:06:04 2018</span></span><br><span class="line"><span class="string">数据增强程序</span></span><br><span class="line"><span class="string">@author: John Kwok</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="string">'''第一步：初始化，数据准备'''</span></span><br><span class="line"><span class="keyword">import</span> GetDataUtil</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">originData = GetDataUtil.saveDataToNP(<span class="string">"../DataSet/trim"</span>,savePath = <span class="string">"../DataSet_NPSave/DataSet.npy"</span>)</span><br><span class="line">GetDataUtil.interpolation(originData,sample = <span class="number">300</span>,kind =<span class="string">"cubic"</span>,savePath=<span class="string">"../DataSet_NPSave/JustifiedData.npy"</span>)</span><br><span class="line"><span class="comment"># 加载文件</span></span><br><span class="line">justifiedData = np.load(<span class="string">"../DataSet_NPSave/JustifiedData.npy"</span>)</span><br><span class="line">print(len(justifiedData))</span><br><span class="line">accelerate_data = []</span><br><span class="line">collision_data = []</span><br><span class="line">uniform_speed_data = []</span><br><span class="line">left_turn_data = []</span><br><span class="line">right_turn_data = []</span><br><span class="line"><span class="comment"># 分离各个动作到数组</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> justifiedData:</span><br><span class="line">     <span class="keyword">if</span> data[<span class="string">"Label"</span>] == <span class="number">1</span>:</span><br><span class="line">          accelerate_data.append(data)</span><br><span class="line">     <span class="keyword">elif</span> data[<span class="string">"Label"</span>] == <span class="number">2</span>:</span><br><span class="line">          collision_data.append(data)</span><br><span class="line">     <span class="keyword">elif</span> data[<span class="string">"Label"</span>] == <span class="number">3</span>:</span><br><span class="line">          uniform_speed_data.append(data)</span><br><span class="line">     <span class="keyword">elif</span> data[<span class="string">"Label"</span>] == <span class="number">4</span>:</span><br><span class="line">          left_turn_data.append(data)</span><br><span class="line">     <span class="keyword">elif</span> data[<span class="string">"Label"</span>] == <span class="number">5</span>:</span><br><span class="line">          right_turn_data.append(data)</span><br><span class="line"><span class="comment"># 转换为numpy</span></span><br><span class="line">accelerate_data = np.array(accelerate_data)</span><br><span class="line">collision_data = np.array(collision_data)</span><br><span class="line">uniform_speed_data = np.array(uniform_speed_data)</span><br><span class="line">left_turn_data = np.array(left_turn_data)</span><br><span class="line">right_turn_data = np.array(right_turn_data)</span><br><span class="line"></span><br><span class="line">print(accelerate_data.shape)</span><br><span class="line">print(collision_data.shape)</span><br><span class="line">print(uniform_speed_data.shape)</span><br><span class="line">print(left_turn_data.shape)</span><br><span class="line">print(right_turn_data.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">算法一：基于非主特征轴加权融合数据增强算法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DataArgument_1</span><span class="params">(rawData,label,expNum=<span class="number">500</span>,weight=<span class="number">0.8</span>,savePath=<span class="string">"../DataSet_NPSave/AugmentatedData"</span>)</span>:</span></span><br><span class="line">     AugmentatedData = []</span><br><span class="line">     rawLenth = len(rawData)</span><br><span class="line">     augNum = expNum - rawLenth</span><br><span class="line">     Labels = [<span class="string">"加速"</span>,<span class="string">"碰撞"</span>,<span class="string">"匀速"</span>,<span class="string">"左转"</span>,<span class="string">"右转"</span>]</span><br><span class="line">     print(rawLenth)</span><br><span class="line">     print(<span class="string">"正在生成新数据，请稍后..."</span>)</span><br><span class="line">     <span class="keyword">while</span> len(AugmentatedData)&lt;augNum:</span><br><span class="line">          </span><br><span class="line">          idx = np.random.randint(rawLenth,size = <span class="number">2</span>)</span><br><span class="line">          <span class="comment"># 注意：这里一定是copy()</span></span><br><span class="line">          data = rawData[idx[<span class="number">0</span>]].copy()</span><br><span class="line">          data[<span class="string">"Acc"</span>] = weight*np.array(rawData[idx[<span class="number">0</span>]][<span class="string">"Acc"</span>])+(<span class="number">1</span>-weight)*np.array(rawData[idx[<span class="number">1</span>]][<span class="string">"Acc"</span>])</span><br><span class="line">          data[<span class="string">"Gyr"</span>] = weight*rawData[idx[<span class="number">0</span>]][<span class="string">"Gyr"</span>]+(<span class="number">1</span>-weight)*rawData[idx[<span class="number">1</span>]][<span class="string">"Gyr"</span>]</span><br><span class="line">          <span class="keyword">if</span> label == <span class="number">1</span>:<span class="comment">#加速 主特征轴 ACC-X     </span></span><br><span class="line">               data[<span class="string">"Acc"</span>][<span class="number">0</span>] = rawData[idx[<span class="number">0</span>]][<span class="string">"Acc"</span>][<span class="number">0</span>]</span><br><span class="line">          <span class="keyword">elif</span> label == <span class="number">2</span>:<span class="comment">#碰撞 主特征轴 ACC-X Gyr-Y</span></span><br><span class="line">               data[<span class="string">"Acc"</span>][<span class="number">0</span>] = rawData[idx[<span class="number">0</span>]][<span class="string">"Acc"</span>][<span class="number">0</span>]</span><br><span class="line">               data[<span class="string">"Gyr"</span>][<span class="number">1</span>] = rawData[idx[<span class="number">0</span>]][<span class="string">"Gyr"</span>][<span class="number">1</span>]</span><br><span class="line"><span class="comment">#          elif label == 3:#匀速 </span></span><br><span class="line">               <span class="comment">#主特征轴 无</span></span><br><span class="line">          <span class="keyword">elif</span> label == <span class="number">4</span>:<span class="comment">#左转 主特征轴 ACC-Y Gyr-Z</span></span><br><span class="line">               data[<span class="string">"Acc"</span>][<span class="number">1</span>] = rawData[idx[<span class="number">0</span>]][<span class="string">"Acc"</span>][<span class="number">1</span>]</span><br><span class="line">               data[<span class="string">"Gyr"</span>][<span class="number">2</span>] = rawData[idx[<span class="number">0</span>]][<span class="string">"Gyr"</span>][<span class="number">2</span>]</span><br><span class="line">          <span class="keyword">elif</span> label == <span class="number">5</span>:<span class="comment">#右转 主特征轴 ACC-Y Gyr-Z</span></span><br><span class="line">               data[<span class="string">"Acc"</span>][<span class="number">1</span>] = rawData[idx[<span class="number">0</span>]][<span class="string">"Acc"</span>][<span class="number">1</span>]</span><br><span class="line">               data[<span class="string">"Gyr"</span>][<span class="number">2</span>] = rawData[idx[<span class="number">0</span>]][<span class="string">"Gyr"</span>][<span class="number">2</span>]</span><br><span class="line">          <span class="comment">#将生成的数据加入集合中</span></span><br><span class="line">          AugmentatedData.append(data)</span><br><span class="line">          <span class="comment">#print("已完成%d%%"%(int(len(AugmentatedData)*100/augNum)))</span></span><br><span class="line">     print(<span class="string">"数据增强已完成，目前数据个数%d"</span>%(len(AugmentatedData)))</span><br><span class="line">     AugmentatedData = np.array(AugmentatedData)</span><br><span class="line">     <span class="comment"># 将生成的新数据集保存</span></span><br><span class="line">     np.save(savePath+Labels[label<span class="number">-1</span>],AugmentatedData)</span><br><span class="line">     AandO = np.concatenate((rawData,AugmentatedData))</span><br><span class="line">     print(AandO.shape)</span><br><span class="line">     <span class="comment"># 将生成的数据集和原始数据集拼接后保存</span></span><br><span class="line">     np.save(<span class="string">"../DataSet_NPSave/Aug1+orgin"</span>+Labels[label<span class="number">-1</span>],AandO)</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> AugmentatedData</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment">#DataArgument_1(accelerate_data,1,expNum=len(accelerate_data)+1)</span></span><br><span class="line"><span class="comment">#DataArgument_1(collision_data,2)</span></span><br><span class="line"><span class="comment">#DataArgument_1(uniform_speed_data,3)</span></span><br><span class="line"><span class="comment">#DataArgument_1(left_turn_data,4)</span></span><br><span class="line"><span class="comment">#DataArgument_1(right_turn_data,5)  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对各动作分别进行数据增强，并将增强后的数据拼接起来，AugDataAll为新生成的数据集（不包括原始数据）</span></span><br><span class="line">AugDataAll = np.concatenate((DataArgument_1(accelerate_data,<span class="number">1</span>),</span><br><span class="line">                             DataArgument_1(collision_data,<span class="number">2</span>),</span><br><span class="line">                             DataArgument_1(uniform_speed_data,<span class="number">3</span>),</span><br><span class="line">                             DataArgument_1(left_turn_data,<span class="number">4</span>),</span><br><span class="line">                             DataArgument_1(right_turn_data,<span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line">AugAndOrginData = np.concatenate((np.load(<span class="string">"../DataSet_NPSave/Aug1+orgin加速.npy"</span>),</span><br><span class="line">                                  np.load(<span class="string">"../DataSet_NPSave/Aug1+orgin碰撞.npy"</span>),</span><br><span class="line">                                  np.load(<span class="string">"../DataSet_NPSave/Aug1+orgin匀速.npy"</span>),</span><br><span class="line">                                  np.load(<span class="string">"../DataSet_NPSave/Aug1+orgin左转.npy"</span>),</span><br><span class="line">                                  np.load(<span class="string">"../DataSet_NPSave/Aug1+orgin右转.npy"</span>),))</span><br><span class="line">print(AugDataAll.shape)</span><br><span class="line">print(AugAndOrginData.shape)</span><br><span class="line"></span><br><span class="line">np.save(<span class="string">"../DataSet_NPSave/AugDataAll"</span>,AugDataAll)</span><br><span class="line">np.save(<span class="string">"../DataSet_NPSave/AugAndOrginData"</span>,AugAndOrginData)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">算法二：背景噪声融合数据增强算法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> GetDataUtil</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">背景噪声融合数据增强算法实现函数：</span></span><br><span class="line"><span class="string">rawData : 原始数据，字典</span></span><br><span class="line"><span class="string">noiseData ：噪声数据，数组 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DataArgument_2</span><span class="params">(rawData,noiseData,savePath=<span class="string">"../DataSet_NPSave/NoiseAugmentatedData"</span>)</span>:</span></span><br><span class="line">     AugmentatedData = []</span><br><span class="line">     noiseLength = noiseData.shape[<span class="number">1</span>]</span><br><span class="line">     print(<span class="string">"正在生成数据，请稍后..."</span>)</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(len(rawData)):</span><br><span class="line">          newData = rawData[i].copy()</span><br><span class="line">          <span class="comment"># 随机切割</span></span><br><span class="line">          idx = np.random.randint(noiseLength<span class="number">-300</span>,size = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">          newData[<span class="string">"Acc"</span>][:<span class="number">2</span>] = newData[<span class="string">"Acc"</span>][:<span class="number">2</span>]+noiseData[:<span class="number">2</span>,idx[<span class="number">0</span>]:idx[<span class="number">0</span>]+<span class="number">300</span>]</span><br><span class="line">          newData[<span class="string">"Acc"</span>][<span class="number">2</span>] = newData[<span class="string">"Acc"</span>][<span class="number">2</span>]+noiseData[<span class="number">2</span>,idx[<span class="number">0</span>]:idx[<span class="number">0</span>]+<span class="number">300</span>]<span class="number">-1</span> <span class="comment"># 减去噪声中的重力</span></span><br><span class="line">          newData[<span class="string">"Gyr"</span>] = newData[<span class="string">"Gyr"</span>]+noiseData[<span class="number">3</span>:<span class="number">6</span>,idx[<span class="number">0</span>]:idx[<span class="number">0</span>]+<span class="number">300</span>]</span><br><span class="line">          AugmentatedData.append(newData)</span><br><span class="line">     print(<span class="string">"已完毕，共生成%d个新数据。"</span>%(len(AugmentatedData)))</span><br><span class="line">     AugmentatedData = np.array(AugmentatedData)</span><br><span class="line">     np.save(savePath,AugmentatedData)</span><br><span class="line">     <span class="keyword">return</span> AugmentatedData</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">noiseDataDic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">noiseData = np.concatenate(GetDataUtil.getAandG(GetDataUtil.readFile(<span class="string">"../DataSet/静止/2017-12-23-匀速"</span>)),axis = <span class="number">0</span>)</span><br><span class="line">print(noiseData.shape)</span><br><span class="line"></span><br><span class="line">rawData = np.load(<span class="string">"../DataSet_NPSave/AugAndOrginData.npy"</span>)</span><br><span class="line">AugmentatedData = DataArgument_2(rawData,</span><br><span class="line">                                 noiseData,</span><br><span class="line">                                 savePath=<span class="string">"../DataSet_NPSave/NoiseAugmentatedData"</span>)</span><br><span class="line">print(AugmentatedData.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将通过噪声融合生成的数据和原始数据合并保存</span></span><br><span class="line"></span><br><span class="line">np.save(<span class="string">"../DataSet_NPSave/NPAWF_Noise_orgin_all_5000"</span>,</span><br><span class="line">        np.concatenate((rawData,AugmentatedData)))</span><br><span class="line">print(<span class="string">"文件保存在：../DataSet_NPSave/NPAWF_Noise_orgin_all_5000.npy"</span>)</span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">算法三：随即剪切数据增强</span></span><br><span class="line"><span class="string">rawData : 原始数据，字典</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DataArgument_3</span><span class="params">(rawData,savePath=<span class="string">"../DataSet_NPSave/RandomCropAugmentatedData"</span>)</span>:</span></span><br><span class="line">     AugmentatedData = []</span><br><span class="line">     print(<span class="string">"正在生成数据，请稍后..."</span>)</span><br><span class="line">     <span class="keyword">for</span> data <span class="keyword">in</span> rawData:</span><br><span class="line">          newData = data.copy()</span><br><span class="line">          idx = np.random.randint(<span class="number">150</span>,size = <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">if</span> data[<span class="string">"Label"</span>] == <span class="number">2</span>: <span class="comment"># 该样本是“碰撞”</span></span><br><span class="line">               <span class="keyword">while</span> np.min(newData[<span class="string">"Acc"</span>][<span class="number">0</span>]) != np.min(newData[<span class="string">"Acc"</span>][<span class="number">0</span>,idx[<span class="number">0</span>]:idx[<span class="number">0</span>]+<span class="number">150</span>]):</span><br><span class="line">                    idx = np.random.randint(<span class="number">150</span>,size = <span class="number">1</span>)</span><br><span class="line">          newData[<span class="string">"Acc"</span>] =  newData[<span class="string">"Acc"</span>][:,idx[<span class="number">0</span>]:idx[<span class="number">0</span>]+<span class="number">150</span>]</span><br><span class="line">          newData[<span class="string">"Gyr"</span>] =  newData[<span class="string">"Gyr"</span>][:,idx[<span class="number">0</span>]:idx[<span class="number">0</span>]+<span class="number">150</span>]</span><br><span class="line">          AugmentatedData.append(newData)</span><br><span class="line">     print(<span class="string">"已完毕，共生成%d个新数据。"</span>%(len(AugmentatedData)))</span><br><span class="line">     AugmentatedData = np.array(AugmentatedData)</span><br><span class="line">     <span class="comment"># 插值处理</span></span><br><span class="line">     <span class="keyword">return</span> GetDataUtil.interpolation(AugmentatedData,</span><br><span class="line">                                      sample = <span class="number">300</span>,</span><br><span class="line">                                      kind =<span class="string">"cubic"</span>,</span><br><span class="line">                                      savePath=savePath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rawData = np.load(<span class="string">"../DataSet_NPSave/NPAWF_Noise_orgin_all_5000.npy"</span>)</span><br><span class="line">AugmentatedData = DataArgument_3(rawData,</span><br><span class="line">                                 savePath=<span class="string">"../DataSet_NPSave/RandomCropAugmentatedData"</span>)</span><br><span class="line">print(AugmentatedData.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将通过噪声融合生成的数据和原始数据合并保存</span></span><br><span class="line"></span><br><span class="line">np.save(<span class="string">"../DataSet_NPSave/RandomCrop_NPAWF_Noise_orgin_all_10000"</span>,</span><br><span class="line">        np.concatenate((rawData,AugmentatedData)))</span><br><span class="line">print(<span class="string">"文件保存在：../DataSet_NPSave/RandomCrop_NPAWF_Noise_orgin_all_10000.npy"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="string">'''提纯数据集,手动改变加速度'''</span></span><br><span class="line"></span><br><span class="line">orinDataSet = np.load(<span class="string">"../DataSet_NPSave/RandomCrop_NPAWF_Noise_orgin_all_10000.npy"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Labels = ["加速","碰撞","匀速","左转","右转"]</span></span><br><span class="line"></span><br><span class="line">accelerate_data = []</span><br><span class="line">collision_data = []</span><br><span class="line">uniform_speed_data = []</span><br><span class="line">left_turn_data = []</span><br><span class="line">right_turn_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> orinDataSet:</span><br><span class="line">     <span class="keyword">if</span> data[<span class="string">"Label"</span>] == <span class="number">1</span>:</span><br><span class="line">          accelerate_data.append(data)</span><br><span class="line">     <span class="keyword">elif</span> data[<span class="string">"Label"</span>] == <span class="number">2</span>:</span><br><span class="line">          collision_data.append(data)</span><br><span class="line">     <span class="keyword">elif</span> data[<span class="string">"Label"</span>] == <span class="number">3</span>:</span><br><span class="line">          uniform_speed_data.append(data)</span><br><span class="line">     <span class="keyword">elif</span> data[<span class="string">"Label"</span>] == <span class="number">4</span>:</span><br><span class="line">          left_turn_data.append(data)</span><br><span class="line">     <span class="keyword">elif</span> data[<span class="string">"Label"</span>] == <span class="number">5</span>:</span><br><span class="line">          right_turn_data.append(data)</span><br><span class="line"><span class="comment"># 转换为numpy</span></span><br><span class="line">accelerate_data = np.array(accelerate_data)</span><br><span class="line">collision_data = np.array(collision_data)</span><br><span class="line">uniform_speed_data = np.array(uniform_speed_data)</span><br><span class="line">left_turn_data = np.array(left_turn_data)</span><br><span class="line">right_turn_data = np.array(right_turn_data)</span><br><span class="line"></span><br><span class="line">print(accelerate_data.shape)</span><br><span class="line">print(collision_data.shape)</span><br><span class="line">print(uniform_speed_data.shape)</span><br><span class="line">print(left_turn_data.shape)</span><br><span class="line">print(right_turn_data.shape)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> accelerate_data:</span><br><span class="line">     data[<span class="string">"Acc"</span>][<span class="number">0</span>] += <span class="number">0.05</span></span><br><span class="line">     count += <span class="number">1</span></span><br><span class="line">print(<span class="string">"已完成%d个样本增加0.05"</span>%(count))</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 数组拼接</span></span><br><span class="line">AllData_Acc_005 = np.concatenate((accelerate_data,</span><br><span class="line">                                  collision_data,</span><br><span class="line">                                  uniform_speed_data,</span><br><span class="line">                                  left_turn_data,</span><br><span class="line">                                  right_turn_data))</span><br><span class="line">np.save(<span class="string">"../DataSet_NPSave/RandomCrop_NPAWF_Noise_orgin_all_ACC_005_10000.npy"</span>,AllData_Acc_005)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> accelerate_data:</span><br><span class="line">     data[<span class="string">"Acc"</span>][<span class="number">0</span>] += <span class="number">0.05</span></span><br><span class="line">     count += <span class="number">1</span></span><br><span class="line">print(<span class="string">"已完成%d个样本增加0.1"</span>%(count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组拼接</span></span><br><span class="line">AllData_Acc_01 = np.concatenate((accelerate_data,</span><br><span class="line">                                  collision_data,</span><br><span class="line">                                  uniform_speed_data,</span><br><span class="line">                                  left_turn_data,</span><br><span class="line">                                  right_turn_data))</span><br><span class="line">np.save(<span class="string">"../DataSet_NPSave/RandomCrop_NPAWF_Noise_orgin_all_ACC_01_10000.npy"</span>,AllData_Acc_01)</span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="string">'''辅助函数： 生成单一样本数据波形图函数'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showPic</span><span class="params">(data,picName,picSavePath = <span class="string">"Pic_temp"</span>)</span>:</span></span><br><span class="line">    Labels = [<span class="string">"加速"</span>,<span class="string">"碰撞"</span>,<span class="string">"匀速"</span>,<span class="string">"左转"</span>,<span class="string">"右转"</span>,<span class="string">"静止噪声"</span>]</span><br><span class="line">    axisLabel = [<span class="string">"X"</span>,<span class="string">"Y"</span>,<span class="string">"Z"</span>]</span><br><span class="line">    colorLabel = [<span class="string">"r"</span>,<span class="string">'g'</span>,<span class="string">"b"</span>]</span><br><span class="line">    curLabel = <span class="number">-1</span></span><br><span class="line">    plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SIMHEI'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">    plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line">    print(<span class="string">"正在生成图片，请稍后......"</span>)</span><br><span class="line">    curLabel = Labels[data[<span class="string">"Label"</span>]<span class="number">-1</span>]<span class="comment">#得到中文标签</span></span><br><span class="line">    print(curLabel)</span><br><span class="line">    plt.figure(figsize=(<span class="number">13</span>,<span class="number">10</span>))</span><br><span class="line">    plt.suptitle(curLabel,fontsize=<span class="number">40</span>,x=<span class="number">0.5</span>,y=<span class="number">0.97</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">         plt.subplot(<span class="number">3</span>,<span class="number">2</span>,i*<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">         plt.title(<span class="string">"加速度-"</span>+axisLabel[i])</span><br><span class="line">         plt.plot(range(len(data[<span class="string">"Acc"</span>][i])),data[<span class="string">"Acc"</span>][i],color=colorLabel[i])</span><br><span class="line">         plt.subplot(<span class="number">3</span>,<span class="number">2</span>,i*<span class="number">2</span>+<span class="number">2</span>)</span><br><span class="line">         plt.title(<span class="string">"角速度-"</span>+axisLabel[i])</span><br><span class="line">         plt.plot(range(len(data[<span class="string">"Gyr"</span>][i])),data[<span class="string">"Gyr"</span>][i],color=colorLabel[i])</span><br><span class="line">    plt.gcf().savefig(picSavePath+<span class="string">"/"</span>+picName+<span class="string">".png"</span>,dpi = <span class="number">120</span>,bbox_inches=<span class="string">'tight'</span>)</span><br><span class="line">    print(<span class="string">"生成图片完毕！"</span>)</span><br><span class="line">    plt.close(<span class="string">'all'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#%%   </span></span><br><span class="line"><span class="comment">#测试：</span></span><br><span class="line"><span class="keyword">import</span> GetDataUtil</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">noiseDataDic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">noiseData = np.concatenate(GetDataUtil.getAandG(GetDataUtil.readFile(<span class="string">"DataSet/静止/2017-12-23-匀速"</span>)),axis = <span class="number">0</span>)</span><br><span class="line">print(noiseData.shape)</span><br><span class="line"></span><br><span class="line">noiseDataDic[<span class="string">"Acc"</span>] = noiseData[:<span class="number">3</span>]</span><br><span class="line">noiseDataDic[<span class="string">"Gyr"</span>] = noiseData[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">noiseDataDic[<span class="string">"Label"</span>] = <span class="number">6</span></span><br><span class="line">showPic(noiseDataDic,<span class="string">"noise"</span>,picSavePath = <span class="string">"Pic_temp"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705113807154-1148949503.png" alt></p><p>你也可以<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">点击查看你的GPU是否支持CUDA</a></p><p>满足以上条件之后，你就可以安装Tensorflow了！</p><h2 id="第一步：安装Anaconda"><a href="#第一步：安装Anaconda" class="headerlink" title="第一步：安装Anaconda"></a>第一步：安装Anaconda</h2><h3 id="1-下载和安装"><a href="#1-下载和安装" class="headerlink" title="1.下载和安装"></a>1.下载和安装</h3><p>下载地址：<a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">https://www.anaconda.com/download/</a></p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180704205522544-257807123.png" alt></p><p>我系统是64位，所以下载 <a href="https://repo.anaconda.com/archive/Anaconda3-5.2.0-Windows-x86_64.exe" target="_blank" rel="noopener">64-Bit Graphical Installer (631 MB)</a>，之后就是进行安装了。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705091036181-1741981998.png" alt></p><p>和安装其他软件没有什么区别，需要注意的是这一步，不要勾选**“Add Anaconda to my PATH enviroment variable”，我们后面会手动加入。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705091214419-1896235118.png" alt></p><p>接下来就是等待了，安装结束后需要测试是否能正常使用，打开CMD输入“conda”命令，发现提示“’conda’ is not recognized as an internal or external command, operable program or batch file.”</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705091843645-1332417216.png" alt></p><p>这是由于我们没有配置环境变量的原因。</p><h3 id="2-配置Anaconda环境变量"><a href="#2-配置Anaconda环境变量" class="headerlink" title="2.配置Anaconda环境变量"></a>2.配置Anaconda环境变量</h3><p>我们点击左下角搜索栏搜索“环境变量”</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180712224500433-1139528305.png" alt></p><p>点击环境变量</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705092348535-716058005.png" alt></p><p>选择“Path”，点击“编辑”</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705115001823-1790541374.png" alt></p><p>将以下三个路径加入，注意这里要换成你自己的安装路径。</p><ul><li><strong>C:\Users\t-yaoguo\AppData\Local\Continuum\anaconda3</strong></li><li><strong>C:\Users\t-yaoguo\AppData\Local\Continuum\anaconda3\Scripts</strong></li><li><strong>C:\Users\t-yaoguo\AppData\Local\Continuum\anaconda3\Library\bin</strong></li></ul><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705115025688-161373164.png" alt></p><p>然后点击“确定”保存，这回再测试一下，再cmd中输入“conda -V”，能正常显示版本号，证明已经配置好了。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705092957695-1463510628.png" alt></p><h2 id="第二步：安装TensorFlow-GPU"><a href="#第二步：安装TensorFlow-GPU" class="headerlink" title="第二步：安装TensorFlow-GPU"></a>第二步：安装TensorFlow-GPU</h2><p>打开tensorflow官网：<a href="https://www.tensorflow.org/install/install_windows#installing_with_anaconda" target="_blank" rel="noopener">https://www.tensorflow.org/install/install_windows#installing_with_anaconda</a></p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705094253567-1541075644.png" alt></p><p>跟着操作步骤走就可以了。</p><h3 id="1-创建conda环境"><a href="#1-创建conda环境" class="headerlink" title="1.创建conda环境"></a>1.创建conda环境</h3><p><strong>通过调用下列命令，创建一个名为“tensorflow”的conda环境：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensorflow pip <span class="attribute">python</span>=3.5</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705094614191-1897993597.png" alt></p><p>等待相应包的安装，如果国内网络太慢的话，可以为conda设置清华源，这样速度能快一点，具体配置过程，网上查一下吧，此处不再讲述。如果看到这样的提示，就证明conda环境创建成功。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705094746559-915102312.png" alt></p><h3 id="2-激活环境"><a href="#2-激活环境" class="headerlink" title="2.激活环境"></a><strong>2.</strong>激活环境</h3><p><strong>通过以下命令激活conda环境：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">activate</span> tensorflow</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705095152134-212214200.png" alt></p><p>这样就进入了刚创建的“tensorflow”环境。</p><h3 id="3-安装tensorflow-gpu"><a href="#3-安装tensorflow-gpu" class="headerlink" title="3.安装tensorflow-gpu"></a>3.安装tensorflow-gpu</h3><p>安装GPU版本的tensorflow需要输入以下命令：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">pip</span> <span class="comment">install</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ignore</span><span class="literal">-</span><span class="comment">installed</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">upgrade</span> <span class="comment">tensorflow</span><span class="literal">-</span><span class="comment">gpu</span></span><br></pre></td></tr></table></figure><p>如果只需要安装CPU版本的tensorflow则输入以下命令：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">pip</span> <span class="comment">install</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ignore</span><span class="literal">-</span><span class="comment">installed</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">upgrade</span> <span class="comment">tensorflow</span></span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705101150191-484866714.png" alt></p><p>这样就安装成功了。</p><p><strong>注意：务必注意一点，在安装完tensroflow后，由于我们是新创建的conda环境，该环境中基本上是空的，有很多包和IDE并没有安装进来，例如“Ipython”，“spyder”此时如果我们在该环境下打开spyder/Ipyton/jupyter notebook等，会发现其实IDE使用的kernel并不是新建立的这个环境的kernel，而是“base”这个环境的，而“base”环境中我们并没有安装tensorflow，所以一定无法import。这也就是为什么有很多人在安装好tensorflow后仍然在IDE里无法正常使用的原因了。</strong></p><p>通过以下命令<strong>安装Anaconda基础包</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> anaconda</span><br></pre></td></tr></table></figure><p>这回，我们测试一下是否能import tensorflow</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705101331778-150729649.png" alt></p><p>程序报错，这是由于我们虽然安装好了tensorflow-gpu，但是还需要安装CUDA Toolkit 和 cuDNN。</p><h2 id="第三步：安装CUDA-Toolkit-cuDNN"><a href="#第三步：安装CUDA-Toolkit-cuDNN" class="headerlink" title="第三步：安装CUDA Toolkit + cuDNN"></a>第三步：安装CUDA Toolkit + cuDNN</h2><h3 id="1-查看需要安装的CUDA-cuDNN版本"><a href="#1-查看需要安装的CUDA-cuDNN版本" class="headerlink" title="1.查看需要安装的CUDA+cuDNN版本"></a>1.查看需要安装的CUDA+cuDNN版本</h3><p>注意，tensorflow是在持续更新的，具体安装的CUDA和cuDNN版本需要去官网查看，要与最新版本的tensorflow匹配。</p><p>点击查看最新tensorflow支持的CUDA版本：<a href="https://www.tensorflow.org/install/install_windows#requirements_to_run_tensorflow_with_gpu_support" target="_blank" rel="noopener">https://www.tensorflow.org/install/install_windows#requirements_to_run_tensorflow_with_gpu_support</a></p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705102915370-47321403.png" alt></p><p>现在（PS：此博客书写日期 2018年7月5日）最新版tensorflow支持的是 CUDA® Toolkit 9.0 + cuDNN v7.0，一定注意，安装的版本一定一定要正确，不要看NVIDIA官网推出CUDA® Toolkit 9.2了就感觉最新版的更好，而安装最新版，这样很可能会导致tensorflow无法正常使用，所以一定要跟着tensorflow 官网的提示来。</p><h3 id="2-下载CUDA-cuDNN"><a href="#2-下载CUDA-cuDNN" class="headerlink" title="2.下载CUDA + cuDNN"></a>2.下载CUDA + cuDNN</h3><p>在这个网址查找CUDA已发布版本：<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705103519042-263893945.png" alt></p><p>进入下载界面</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705103632690-383904492.png" alt></p><p>下载好CUDA Toolkit 9.0 后，我们开始下载cuDnn 7.0，需要注意的是，下载cuDNN需要在nvidia上注册账号，使用邮箱注册就可以，免费的。登陆账号后才能下载。</p><p>cuDNN历史版本在该网址下载：<a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-archive</a></p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705104143709-980876852.png" alt></p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705104232673-602423613.png" alt></p><p>这样，我们就下载好了 CUDA Toolkit 9.0 和 cuDnn 7.0，下面我们开始安装。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705110343899-547838964.png" alt></p><h3 id="3-安装-CUDA-Toolkit-9-0-和-cuDnn-7-0"><a href="#3-安装-CUDA-Toolkit-9-0-和-cuDnn-7-0" class="headerlink" title="3.安装 CUDA Toolkit 9.0 和 cuDnn 7.0"></a>3.安装 CUDA Toolkit 9.0 和 cuDnn 7.0</h3><h4 id="至关重要的一步：卸载显卡驱动"><a href="#至关重要的一步：卸载显卡驱动" class="headerlink" title="至关重要的一步：卸载显卡驱动"></a>至关重要的一步：卸载显卡驱动</h4><p>由于CUDA Toolkit需要在指定版本显卡驱动环境下才能正常使用的，所以如果我们已经安装了nvidia显卡驱动（很显然，大部分人都安装了），再安装CUDA Toolkit时，会因二者版本不兼容而导致CUDA无法正常使用，这也就是很多人安装失败的原因。而CUDA Toolkit安装包中自带与之匹配的显卡驱动，所以务必要删除电脑先前的显卡驱动。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705115205864-2143714763.png" alt></p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705110845289-537484005.png" alt></p><p>此处选择“自定义（高级）”</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705110931263-772504477.png" alt></p><p>勾选所有</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705111052844-1550192459.png" alt></p><p>一路通过即可。</p><p>接下来，解压“cudnn-9.0-windows10-x64-v7.zip”，将一下三个文件夹，拷贝到CUDA安装的根目录下。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705112106166-968215143.png" alt></p><p>这样CUDA Toolkit 9.0 和 cuDnn 7.0就已经安装了，下面要进行环境变量的配置。</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>将下面四个路径加入到环境变量中，注意要换成自己的安装路径。</p><blockquote><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0   </p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin  </p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\lib\x64   </p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\libnvvp</p></blockquote><p>到此，全部的安装步骤都已经完成，这回我们测试一下。</p><h2 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h2><p>1.查看是否使用GPU</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="title">tf</span>.test.gpu_device_name()</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705113152575-1829788705.png" alt></p><p>2.查看在使用哪个GPU</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">from</span> <span class="selector-tag">tensorflow</span><span class="selector-class">.python</span><span class="selector-class">.client</span> <span class="selector-tag">import</span> <span class="selector-tag">device_lib</span></span><br><span class="line"><span class="selector-tag">device_lib</span><span class="selector-class">.list_local_devices</span>()</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1192699/201807/1192699-20180705113209801-2007548884.png" alt></p><p>好了大功告成！</p><p>希望这篇博文能给大家带来帮助，如有任何错误，欢迎指教交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;配置环境，研究了一整天，踩了很多坑，在网上找了很多资料，发现基本上都没非常明确的教程，所以今天想分享一下配置tensorflow GPU版本
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://www.guoyaohua.cn/2019/05/06/my-first-blog/"/>
    <id>https://www.guoyaohua.cn/2019/05/06/my-first-blog/</id>
    <published>2019-05-06T09:36:21.000Z</published>
    <updated>2019-05-07T01:39:57.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h2><h3 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h3>]]></content>
    
    <summary type="html">
    
      这是我第一篇博客
    
    </summary>
    
      <category term="deeplearning/test" scheme="https://www.guoyaohua.cn/categories/deeplearning-test/"/>
    
    
      <category term="blog" scheme="https://www.guoyaohua.cn/tags/blog/"/>
    
      <category term="first" scheme="https://www.guoyaohua.cn/tags/first/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.guoyaohua.cn/2019/05/06/hello-world-1/"/>
    <id>https://www.guoyaohua.cn/2019/05/06/hello-world-1/</id>
    <published>2019-05-06T02:47:18.729Z</published>
    <updated>2019-05-06T11:56:21.596Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>When $a \ne 0$, there are two solutions to (ax^2 + bx + c = 0) and they are<br>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p><p>When $a \ne 0$, there are two solutions to (ax^2 + bx + c = 0) and they are<br>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p><p>When $a \ne 0$, there are two solutions to (ax^2 + bx + c = 0) and they are<br>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p><p>When $a \ne 0$, there are two solutions to (ax^2 + bx + c = 0) and they are<br>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
